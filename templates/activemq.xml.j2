<!-- {{ ansible_managed }} -->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.conf}/credentials.properties</value>
        </property>
    </bean>

    <broker xmlns="http://activemq.apache.org/schema/core" 
                brokerName="{{ amq_broker_instance_name }}" 
                dataDirectory="${activemq.data}"
                useJmx="true"
                advisorySupport="false"
                persistent="true"
                deleteAllMessagesOnStartup="false"
                useShutdownHook="false"
                schedulerSupport="true">

        <plugins>
            <jaasAuthenticationPlugin configuration="activemq" />
            <runtimeConfigurationPlugin checkPeriod="30000" />
            <authorizationPlugin>
                <map>
                    <authorizationMap>
                       <authorizationEntries>
{% for topic in list_topic %}
                        <authorizationEntry topic="{{ topic.name }}" read="{{ topic.read }}" write="{{ topic.write }}" admin="{{ topic.admin }}"/>
{% endfor %}
{% for queue in list_queue %}
                        <authorizationEntry queue="{{ queue.name }}" read="{{ queue.read }}" write="{{ queue.write }}" admin="{{ queue.admin }}"/>
{% endfor %}
			</authorizationEntries>                        
			<tempDestinationAuthorizationEntry>
                            <tempDestinationAuthorizationEntry read="admins" write="admins" admin="admins"/>
                        </tempDestinationAuthorizationEntry>
                    </authorizationMap>
                </map>
            </authorizationPlugin>
        </plugins>

        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" producerFlowControl="true">
                  <pendingMessageLimitStrategy>
                    <constantPendingMessageLimitStrategy limit="1000"/>
                  </pendingMessageLimitStrategy>
                </policyEntry>

              <policyEntry queue=">" producerFlowControl="false" cursorMemoryHighWaterMark="30">
              </policyEntry>

{% for policy in list_policy %}
                <policyEntry queue="{{ policy.name }}" producerFlowControl="true" memoryLimit="{{ policy.memory }}">
                    <pendingQueuePolicy>
                        <vmQueueCursor/>
                    </pendingQueuePolicy>
                </policyEntry>
{% endfor %}

                <!-- Dead-messages queue prefix -->
                <policyEntry queue=">" producerFlowControl="false">
                  <deadLetterStrategy>
                    <individualDeadLetterStrategy queuePrefix="dlq." useQueueForQueueMessages="true" />
                  </deadLetterStrategy>
                </policyEntry>

              </policyEntries>
            </policyMap>
        </destinationPolicy>

        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

        <persistenceAdapter>
            <kahaDB directory="${activemq.data}/kahadb"/>
        </persistenceAdapter>

          <systemUsage>
            <systemUsage sendFailIfNoSpace="true">
                <memoryUsage>
                    <memoryUsage percentOfJvmHeap="70" />
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="10 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="5 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <transportConnectors>
            <transportConnector name="openwire" uri="{{ amq_openwire_transport_connector_uri }}"/>
            <transportConnector name="amqp" uri="{{ amq_amqp_transport_connector_uri }}"/>
            <transportConnector name="stomp" uri="{{ amq_stomp_transport_connector_uri }}"/>
            <transportConnector name="stomp+nio" uri="{{ amq_stomp_and_nio_transport_connector_uri }}"/>
            <transportConnector name="mqtt" uri="{{ amq_mqtt_transport_connector_uri }}"/>
            <transportConnector name="ws" uri="{{ amq_ws_transport_connector_uri }}"/>
        </transportConnectors>

        <shutdownHooks>
            <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
        </shutdownHooks>

    </broker>
    <import resource="jetty.xml"/>
</beans>
